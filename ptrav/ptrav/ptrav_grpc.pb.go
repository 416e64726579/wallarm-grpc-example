// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ptrav

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PathTraversalClient is the client API for PathTraversal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PathTraversalClient interface {
	// Sends a greeting
	ShowContent(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*ContentReply, error)
}

type pathTraversalClient struct {
	cc grpc.ClientConnInterface
}

func NewPathTraversalClient(cc grpc.ClientConnInterface) PathTraversalClient {
	return &pathTraversalClient{cc}
}

func (c *pathTraversalClient) ShowContent(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*ContentReply, error) {
	out := new(ContentReply)
	err := c.cc.Invoke(ctx, "/ptrav.PathTraversal/ShowContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PathTraversalServer is the server API for PathTraversal service.
// All implementations must embed UnimplementedPathTraversalServer
// for forward compatibility
type PathTraversalServer interface {
	// Sends a greeting
	ShowContent(context.Context, *PathRequest) (*ContentReply, error)
	mustEmbedUnimplementedPathTraversalServer()
}

// UnimplementedPathTraversalServer must be embedded to have forward compatible implementations.
type UnimplementedPathTraversalServer struct {
}

func (*UnimplementedPathTraversalServer) ShowContent(context.Context, *PathRequest) (*ContentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowContent not implemented")
}
func (*UnimplementedPathTraversalServer) mustEmbedUnimplementedPathTraversalServer() {}

func RegisterPathTraversalServer(s *grpc.Server, srv PathTraversalServer) {
	s.RegisterService(&_PathTraversal_serviceDesc, srv)
}

func _PathTraversal_ShowContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PathTraversalServer).ShowContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptrav.PathTraversal/ShowContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PathTraversalServer).ShowContent(ctx, req.(*PathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PathTraversal_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ptrav.PathTraversal",
	HandlerType: (*PathTraversalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShowContent",
			Handler:    _PathTraversal_ShowContent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ptrav/ptrav.proto",
}
